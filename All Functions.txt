
  //  FUNCTION TO ADD THE PRODUCT TO THE CART
  const handleAddToCart = () => {
    setCartDisable(true);

    const existingCart = Cookies.get("DIVAcart");
    const cartItems: cartItemProps[] = existingCart
      ? JSON.parse(existingCart)
      : [];

    if (cartItem != undefined) {
      const isProductInCart = cartItems.some((item) => item.id === cartItem.id);
      if (isProductInCart) {
        warningTost("Product is already added to the cart");
      } else {
        if (userLocalId) {
          generateRandomNumber();

          addToCart(
            String(productId),
            userLocalId,
            product?.attributes.name,
            product?.attributes.price,
            product?.attributes.images.data[0].attributes.url
          );

          cartItems.push(cartItem);
          Cookies.set("DIVAcart", JSON.stringify(cartItems), {
            expires: 365,
            secure: window.location.protocol === "https:",
            sameSite: "Lax",
            path: "/",
            domain: window.location.hostname,
          });
        } else {
          cartItems.push(cartItem);
          Cookies.set("DIVAcart", JSON.stringify(cartItems), {
            expires: 365,
            secure: window.location.protocol === "https:",
            sameSite: "Lax",
            path: "/",
            domain: window.location.hostname,
          });
        }

        successTost("Product added to cart");
        const randomNumber = Math.floor(Math.random() * 100) + 1;
        setRandomNum(randomNumber);
      }
    } else {
      console.log("cart Item is undefined");
    }

    setTimeout(() => {
      setCartDisable(false);
    }, 3500);
  };





  // GET THE REVIEW DATA
  useEffect(() => {
    const fetchReview = async () => {
      try {
        const res = await fetch(
          `${domain}/api/reviews?filters[$and][0][product_id][$eq]=${productId}`
        );
        const data = await res.json();
        const reviews: ReviewAttributes[] = data.data;
        setTotalReviews(reviews.length);

        if (reviews.length > 0) {
          const sumRatings = reviews.reduce(
            (sum, review) => sum + review.attributes.ratting,
            0
          );
          const averageRating = sumRatings / reviews.length;
          setAvgReviews(averageRating);
        } else {
          setAvgReviews(0);
        }
      } catch (error) {
        console.error("Error fetching reviews:", error);
      }
    };

    fetchReview();
  }, [productId, randomNum]);

// ADD REVIEW CODE
  const submitHandler = async (e: React.FormEvent) => {
    e.preventDefault();
    if (userLocalId !== "null") {
      if (reviewAdded) {
        let userName = "User";
        await addReview(productId, rating, description, userLocalId)
          .then(() => {
            setIsOpen(false);
            successTost("your review added successfully");
          })
          .catch((error) => {
            console.error("Error submitting review:", error);
          });

        setRating(0);
        setDescription("");

        random();
      } else {
        warningTost("Your review is already added");
      }
    } else {
      e.preventDefault();
      errorTost("Please Login first");
    }
  };


